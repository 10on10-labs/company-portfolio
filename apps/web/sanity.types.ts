// Query TypeMap
import '@sanity/client';

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Duration = {
  _type: 'duration';
  start?: string;
  end?: string;
};

export type Testimonial = {
  _id: string;
  _type: 'testimonial';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  clientName?: string;
  role?: string;
  testimonial?: string;
  clientImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  rating?: number;
};

export type Brand = {
  _id: string;
  _type: 'brand';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  link?: string;
  order?: number;
};

export type BlogCategory = {
  _id: string;
  _type: 'blogCategory';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  chipColor?: Color;
};

export type Leadership = {
  _id: string;
  _type: 'leadership';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subTitle?: string;
  members?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    name?: string;
    designation?: string;
    portfolioUrl?: string;
    _type: 'leader';
    _key: string;
  }>;
};

export type CompanyTimeline = {
  _id: string;
  _type: 'companyTimeline';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subTitle?: string;
  items?: Array<{
    year?: string;
    title?: string;
    description?: string;
    _type: 'timelineItem';
    _key: string;
  }>;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }
  | ({
      _key: string;
    } & Code)
>;

export type TranslationMetadata = {
  _id: string;
  _type: 'translation.metadata';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<
    {
      _key: string;
    } & InternationalizedArrayReferenceValue
  >;
  schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
  _type: 'internationalizedArrayReferenceValue';
  value?:
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'service';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'blog';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'project';
      };
};

export type Project = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  priority?: number;
  name?: string;
  slug?: Slug;
  description?: string;
  category?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  url?: string;
  projectDimensions?: {
    timeline?: {
      value?: number;
      unit?: 'Week(s)' | 'Month(s)' | 'Year(s)';
    };
    teamSize?: number;
    iterations?: number;
    technologies?: number;
  };
  coverImages?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
    _key: string;
  }>;
  projectSections?: Array<{
    id?: string;
    name?: string;
    description?: BlockContent;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }>;
    _key: string;
  }>;
};

export type Blog = {
  _id: string;
  _type: 'blog';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  slug?: Slug;
  subTitle?: string;
  author?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'author';
  };
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  blogCategories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'blogCategory';
  }>;
  publishedAt?: string;
  body?: BlockContent;
};

export type Author = {
  _id: string;
  _type: 'author';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type Service = {
  _id: string;
  _type: 'service';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  name?: string;
  id?: Slug;
  shortDescription?: string;
  description?: string;
  categories?: Array<string>;
  icon?:
    | 'monitor'
    | 'code'
    | 'smartphone'
    | 'database'
    | 'cloud'
    | 'shield'
    | 'chart'
    | 'palette'
    | 'rocket'
    | 'settings';
  heroSection?: {
    tagline?: string;
    headline?: string;
    subheadline?: string;
    primaryButtonText?: string;
    secondaryButtonText?: string;
  };
  featuresSection?: {
    title?: string;
    description?: string;
  };
  technologiesSection?: {
    title?: string;
    description?: string;
  };
  processSection?: {
    title?: string;
    description?: string;
  };
  features?: Array<{
    title?: string;
    description?: string;
    icon?:
      | 'code'
      | 'zap'
      | 'users'
      | 'palette'
      | 'shield'
      | 'gauge'
      | 'gitbranch'
      | 'globe'
      | 'smartphone'
      | 'rocket';
    _key: string;
  }>;
  technologies?: Array<{
    name?: string;
    icon?: string;
    _key: string;
  }>;
  processSteps?: Array<{
    number?: string;
    title?: string;
    description?: string;
    _key: string;
  }>;
  benefits?: Array<string>;
  whyChooseUs?: {
    headline?: string;
    description?: string;
    reasons?: Array<{
      title?: string;
      description?: string;
      icon?: 'users' | 'zap' | 'shield' | 'code' | 'rocket';
      _key: string;
    }>;
  };
  ctaSection?: {
    headline?: string;
    description?: string;
    primaryButtonText?: string;
    secondaryButtonText?: string;
  };
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
  };
};

export type InternationalizedArrayReference = Array<
  {
    _key: string;
  } & InternationalizedArrayReferenceValue
>;

export type Code = {
  _type: 'code';
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type Color = {
  _type: 'color';
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: 'rgbaColor';
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: 'hsvaColor';
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: 'hslaColor';
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Duration
  | Testimonial
  | Brand
  | BlogCategory
  | Leadership
  | CompanyTimeline
  | BlockContent
  | TranslationMetadata
  | InternationalizedArrayReferenceValue
  | Project
  | Blog
  | Author
  | Service
  | InternationalizedArrayReference
  | Code
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/[locale]/(with-layout)/services/[slug]/page.tsx
// Variable: serviceQuery
// Query: *[_type == "service" && id.current == $slug && language == $language][0] {    _id,    name,    "slug": id.current,    shortDescription,    description,    categories,    icon,    heroSection {      tagline,      headline,      subheadline,      primaryButtonText,      secondaryButtonText    },    featuresSection {      title,      description    },    technologiesSection {      title,      description    },    processSection {      title,      description    },    features[] {      title,      description,      icon    },    technologies[] {      name,      icon    },    processSteps[] {      number,      title,      description    },    benefits,    whyChooseUs {      headline,      description,      reasons[] {        title,        description,        icon      }    },    ctaSection {      headline,      description,      primaryButtonText,      secondaryButtonText    },    seo {      metaTitle,      metaDescription    }  }
export type ServiceQueryResult = {
  _id: string;
  name: string | null;
  slug: string | null;
  shortDescription: string | null;
  description: string | null;
  categories: Array<string> | null;
  icon:
    | 'chart'
    | 'cloud'
    | 'code'
    | 'database'
    | 'monitor'
    | 'palette'
    | 'rocket'
    | 'settings'
    | 'shield'
    | 'smartphone'
    | null;
  heroSection: {
    tagline: string | null;
    headline: string | null;
    subheadline: string | null;
    primaryButtonText: string | null;
    secondaryButtonText: string | null;
  } | null;
  featuresSection: {
    title: string | null;
    description: string | null;
  } | null;
  technologiesSection: {
    title: string | null;
    description: string | null;
  } | null;
  processSection: {
    title: string | null;
    description: string | null;
  } | null;
  features: Array<{
    title: string | null;
    description: string | null;
    icon:
      | 'code'
      | 'gauge'
      | 'gitbranch'
      | 'globe'
      | 'palette'
      | 'rocket'
      | 'shield'
      | 'smartphone'
      | 'users'
      | 'zap'
      | null;
  }> | null;
  technologies: Array<{
    name: string | null;
    icon: string | null;
  }> | null;
  processSteps: Array<{
    number: string | null;
    title: string | null;
    description: string | null;
  }> | null;
  benefits: Array<string> | null;
  whyChooseUs: {
    headline: string | null;
    description: string | null;
    reasons: Array<{
      title: string | null;
      description: string | null;
      icon: 'code' | 'rocket' | 'shield' | 'users' | 'zap' | null;
    }> | null;
  } | null;
  ctaSection: {
    headline: string | null;
    description: string | null;
    primaryButtonText: string | null;
    secondaryButtonText: string | null;
  } | null;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
  } | null;
} | null;
// Variable: servicesSlugQuery
// Query: *[_type == "service"] {    "slug": id.current  } | order(slug)
export type ServicesSlugQueryResult = Array<{
  slug: string | null;
}>;

declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "service" && id.current == $slug && language == $language][0] {\n    _id,\n    name,\n    "slug": id.current,\n    shortDescription,\n    description,\n    categories,\n    icon,\n    heroSection {\n      tagline,\n      headline,\n      subheadline,\n      primaryButtonText,\n      secondaryButtonText\n    },\n    featuresSection {\n      title,\n      description\n    },\n    technologiesSection {\n      title,\n      description\n    },\n    processSection {\n      title,\n      description\n    },\n    features[] {\n      title,\n      description,\n      icon\n    },\n    technologies[] {\n      name,\n      icon\n    },\n    processSteps[] {\n      number,\n      title,\n      description\n    },\n    benefits,\n    whyChooseUs {\n      headline,\n      description,\n      reasons[] {\n        title,\n        description,\n        icon\n      }\n    },\n    ctaSection {\n      headline,\n      description,\n      primaryButtonText,\n      secondaryButtonText\n    },\n    seo {\n      metaTitle,\n      metaDescription\n    }\n  }\n': ServiceQueryResult;
    '\n  *[_type == "service"] {\n    "slug": id.current\n  } | order(slug)\n': ServicesSlugQueryResult;
  }
}
