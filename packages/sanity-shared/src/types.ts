/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Duration = {
  _type: "duration";
  start?: string;
  end?: string;
};

export type Brand = {
  _id: string;
  _type: "brand";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  link?: string;
  order?: number;
};

export type BlogCategory = {
  _id: string;
  _type: "blogCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  chipColor?: Color;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & Code>;

export type TranslationMetadata = {
  _id: string;
  _type: "translation.metadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<{
    _key: string;
  } & InternationalizedArrayReferenceValue>;
  schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
  _type: "internationalizedArrayReferenceValue";
  value?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "service";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "blog";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "testimonial";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "companyTimeline";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "leadership";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "aboutHero";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "aboutMissionVision";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "aboutStats";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "aboutStory";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "aboutValues";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "aboutCTA";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "pricing";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "process";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "accelerate";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "homepageHero";
  };
};

export type HomepageHero = {
  _id: string;
  _type: "homepageHero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: "en" | "ar";
  title?: string;
  subtitle?: string;
  description?: string;
  ctaButtons?: Array<{
    text?: string;
    link?: string;
    variant?: "primary" | "secondary" | "outline";
    _key: string;
  }>;
  expertiseSection?: {
    title?: string;
    subtitle?: string;
  };
  trustedByText?: string;
};

export type Accelerate = {
  _id: string;
  _type: "accelerate";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  language?: "en" | "ar";
  heading?: string;
  services?: Array<string>;
  buttonText?: string;
};

export type Process = {
  _id: string;
  _type: "process";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  language?: "en" | "ar";
  badge?: string;
  heading?: string;
  steps?: Array<{
    number?: string;
    title?: string;
    description?: string;
    tag?: string;
    _key: string;
  }>;
  progressLabel?: string;
};

export type Pricing = {
  _id: string;
  _type: "pricing";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  heroSection?: {
    badge?: string;
    title?: string;
    description?: string;
    primaryButtonText?: string;
    secondaryButtonText?: string;
  };
  valuePropsSection?: {
    valueProps?: Array<{
      icon?: "zap" | "shield" | "users" | "heart-handshake" | "target" | "rocket" | "check-circle" | "star";
      title?: string;
      description?: string;
      _key: string;
    }>;
  };
  pricingPlansSection?: {
    title?: string;
    description?: string;
    plans?: Array<{
      name?: string;
      price?: string;
      period?: string;
      description?: string;
      isPopular?: boolean;
      features?: Array<string>;
      buttonText?: string;
      _key: string;
    }>;
  };
  comparisonSection?: {
    title?: string;
    description?: string;
    comparisons?: Array<{
      feature?: string;
      us?: string;
      them?: string;
      _key: string;
    }>;
  };
  faqsSection?: {
    title?: string;
    faqs?: Array<{
      question?: string;
      answer?: string;
      _key: string;
    }>;
  };
  ctaSection?: {
    title?: string;
    description?: string;
    primaryButtonText?: string;
    secondaryButtonText?: string;
    disclaimer?: string;
  };
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
  };
};

export type AboutCTA = {
  _id: string;
  _type: "aboutCTA";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  description?: string;
  buttonText?: string;
};

export type AboutValues = {
  _id: string;
  _type: "aboutValues";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  sectionTitle?: string;
  subtitle?: string;
  values?: Array<{
    title?: string;
    description?: string;
    icon?: "award" | "users" | "check-circle" | "rocket" | "target" | "heart" | "shield" | "star" | "lightbulb" | "globe";
    _key: string;
  }>;
};

export type AboutStory = {
  _id: string;
  _type: "aboutStory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  sectionTitle?: string;
  subtitle?: string;
  paragraphs?: Array<string>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type AboutStats = {
  _id: string;
  _type: "aboutStats";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  stats?: Array<{
    number?: string;
    label?: string;
    icon?: "award" | "target" | "users" | "rocket" | "check-circle" | "star" | "trophy" | "heart";
    _key: string;
  }>;
};

export type AboutMissionVision = {
  _id: string;
  _type: "aboutMissionVision";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  mission?: {
    title?: string;
    description?: string;
  };
  vision?: {
    title?: string;
    description?: string;
  };
};

export type AboutHero = {
  _id: string;
  _type: "aboutHero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  tagline?: string;
  title?: string;
  description?: string;
};

export type Leadership = {
  _id: string;
  _type: "leadership";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  subTitle?: string;
  members?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    name?: string;
    designation?: string;
    portfolioUrl?: string;
    _type: "leader";
    _key: string;
  }>;
};

export type CompanyTimeline = {
  _id: string;
  _type: "companyTimeline";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  subTitle?: string;
  items?: Array<{
    year?: string;
    title?: string;
    description?: string;
    _type: "timelineItem";
    _key: string;
  }>;
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  clientName?: string;
  role?: string;
  testimonial?: string;
  clientImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  rating?: number;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  priority?: number;
  name?: string;
  slug?: Slug;
  description?: string;
  category?: string;
  technologies?: Array<{
    name?: string;
    icon?: string;
    _key: string;
  }>;
  services?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "service";
  }>;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  url?: string;
  projectDimensions?: {
    timeline?: {
      value?: number;
      unit?: "Week(s)" | "Month(s)" | "Year(s)";
    };
    teamSize?: number;
    iterations?: number;
    technologies?: number;
  };
  coverImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  projectSections?: Array<{
    id?: string;
    name?: string;
    description?: BlockContent;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
    _key: string;
  }>;
};

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  slug?: Slug;
  subTitle?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  blogCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "blogCategory";
  }>;
  publishedAt?: string;
  body?: BlockContent;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  name?: string;
  id?: Slug;
  shortDescription?: string;
  description?: string;
  categories?: Array<string>;
  icon?: "monitor" | "code" | "smartphone" | "database" | "cloud" | "shield" | "chart" | "palette" | "rocket" | "settings";
  heroSection?: {
    tagline?: string;
    headline?: string;
    subheadline?: string;
    primaryButtonText?: string;
    secondaryButtonText?: string;
  };
  featuresSection?: {
    title?: string;
    description?: string;
  };
  technologiesSection?: {
    title?: string;
    description?: string;
  };
  processSection?: {
    title?: string;
    description?: string;
    processSteps?: Array<{
      number?: string;
      title?: string;
      description?: string;
      _key: string;
    }>;
  };
  features?: Array<{
    title?: string;
    description?: string;
    icon?: "code" | "zap" | "users" | "palette" | "shield" | "gauge" | "gitbranch" | "globe" | "smartphone" | "rocket";
    _key: string;
  }>;
  technologies?: Array<{
    name?: string;
    icon?: string;
    _key: string;
  }>;
  benefits?: Array<string>;
  whyChooseUs?: {
    headline?: string;
    description?: string;
    reasons?: Array<{
      title?: string;
      description?: string;
      icon?: "users" | "zap" | "shield" | "code" | "rocket";
      _key: string;
    }>;
  };
  ctaSection?: {
    headline?: string;
    description?: string;
    primaryButtonText?: string;
    secondaryButtonText?: string;
  };
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
  };
};

export type InternationalizedArrayReference = Array<{
  _key: string;
} & InternationalizedArrayReferenceValue>;

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Duration | Brand | BlogCategory | BlockContent | TranslationMetadata | InternationalizedArrayReferenceValue | HomepageHero | Accelerate | Process | Pricing | AboutCTA | AboutValues | AboutStory | AboutStats | AboutMissionVision | AboutHero | Leadership | CompanyTimeline | Testimonial | Project | Blog | Author | Service | InternationalizedArrayReference | Code | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../web/lib/sanity-queries/about-queries.ts
// Variable: aboutHeroQuery
// Query: *[_type == "aboutHero" && language == $language][0] {   _id,   language,   tagline,   title,   description }
export type AboutHeroQueryResult = {
  _id: string;
  language: string | null;
  tagline: string | null;
  title: string | null;
  description: string | null;
} | null;
// Variable: aboutMissionVisionQuery
// Query: *[_type == "aboutMissionVision" && language == $language][0] {   _id,   language,   mission {     title,     description   },   vision {     title,     description   } }
export type AboutMissionVisionQueryResult = {
  _id: string;
  language: string | null;
  mission: {
    title: string | null;
    description: string | null;
  } | null;
  vision: {
    title: string | null;
    description: string | null;
  } | null;
} | null;
// Variable: aboutStatsQuery
// Query: *[_type == "aboutStats" && language == $language][0] {   _id,   language,   stats[] {     number,     label,     icon   } }
export type AboutStatsQueryResult = {
  _id: string;
  language: string | null;
  stats: Array<{
    number: string | null;
    label: string | null;
    icon: "award" | "check-circle" | "heart" | "rocket" | "star" | "target" | "trophy" | "users" | null;
  }> | null;
} | null;
// Variable: aboutStoryQuery
// Query: *[_type == "aboutStory" && language == $language][0] {   _id,   language,   sectionTitle,   subtitle,   paragraphs,   image }
export type AboutStoryQueryResult = {
  _id: string;
  language: string | null;
  sectionTitle: string | null;
  subtitle: string | null;
  paragraphs: Array<string> | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
} | null;
// Variable: aboutValuesQuery
// Query: *[_type == "aboutValues" && language == $language][0] {   _id,   language,   sectionTitle,   subtitle,   values[] {     title,     description,     icon   } }
export type AboutValuesQueryResult = {
  _id: string;
  language: string | null;
  sectionTitle: string | null;
  subtitle: string | null;
  values: Array<{
    title: string | null;
    description: string | null;
    icon: "award" | "check-circle" | "globe" | "heart" | "lightbulb" | "rocket" | "shield" | "star" | "target" | "users" | null;
  }> | null;
} | null;
// Variable: aboutCTAQuery
// Query: *[_type == "aboutCTA" && language == $language][0] {   _id,   language,   title,   description,   buttonText }
export type AboutCTAQueryResult = {
  _id: string;
  language: string | null;
  title: string | null;
  description: string | null;
  buttonText: string | null;
} | null;
// Variable: companyTimelineQuery
// Query: *[_type == "companyTimeline" && language == $language][0] {   _id,   language,   title,   subTitle,   items[] {     year,     title,     description   } }
export type CompanyTimelineQueryResult = {
  _id: string;
  language: string | null;
  title: string | null;
  subTitle: string | null;
  items: Array<{
    year: string | null;
    title: string | null;
    description: string | null;
  }> | null;
} | null;
// Variable: companyLeadershipQuery
// Query: *[_type == "leadership" && language == $language][0] {   _id,   language,   title,   subTitle,   members[] {    name,    designation,    portfolioUrl,    image  } }
export type CompanyLeadershipQueryResult = {
  _id: string;
  language: string | null;
  title: string | null;
  subTitle: string | null;
  members: Array<{
    name: string | null;
    designation: string | null;
    portfolioUrl: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  }> | null;
} | null;

// Source: ../web/lib/sanity-queries/accelerate-queries.ts
// Variable: accelerateQuery
// Query: *[_type == "accelerate" && language == $language][0] {    _id,    title,    language,    heading,    services,    buttonText  }
export type AccelerateQueryResult = {
  _id: string;
  title: string | null;
  language: "ar" | "en" | null;
  heading: string | null;
  services: Array<string> | null;
  buttonText: string | null;
} | null;

// Source: ../web/lib/sanity-queries/blog-queries.ts
// Variable: blogBySlugQuery
// Query: *[_type == "blog" && slug.current == $slug && language == $language][0] {        title,        subTitle,        "modifiedAt": _updatedAt,        author->,        thumbnail,        body,        blogCategories[]->{            title,            "chipColor": chipColor.hex,            "slug": slug.current,         },    }
export type BlogBySlugQueryResult = {
  title: string | null;
  subTitle: string | null;
  modifiedAt: string;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  body: BlockContent | null;
  blogCategories: Array<{
    title: string | null;
    chipColor: string | null;
    slug: string | null;
  }> | null;
} | null;
// Variable: blogsSlugQuery
// Query: *[_type == "blog" && language == $language] {        "slug": slug.current    }
export type BlogsSlugQueryResult = Array<{
  slug: string | null;
}>;
// Variable: blogCategoriesQuery
// Query: *[_type == "blogCategory"] {  title,  "slug": slug.current}
export type BlogCategoriesQueryResult = Array<{
  title: string | null;
  slug: string | null;
}>;
// Variable: blogsByCategoryQuery
// Query: *[_type == "blog" && language == $language &&    ($categorySlugs == null || references(*[_type == "blogCategory" && slug.current in $categorySlugs]._id))  ] {    _id,    title,    subTitle,    // assumes 5 characters as mean word length    // https://ux.stackexchange.com/questions/22520/how-long-does-it-take-to-read-x-number-of-characters    "readingTimeInMins": round(length(pt::text(body)) / 5 / 180 ),    author->{     name,     image    },    blogCategories[]->{      title,      "chipColor": chipColor.hex    },    "slug": slug.current,    thumbnail,    publishedAt  }
export type BlogsByCategoryQueryResult = Array<{
  _id: string;
  title: string | null;
  subTitle: string | null;
  readingTimeInMins: number;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  blogCategories: Array<{
    title: string | null;
    chipColor: string | null;
  }> | null;
  slug: string | null;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
}>;
// Variable: blogsQuery
// Query: *[_type == "blog" && language == $language] | order(publishedAt desc) [0...10] {    _id,    title,    "excerpt": subTitle,    "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),    "slug": slug.current,    "image": thumbnail,    publishedAt,    author->{      name,      "picture": image    },    "category": blogCategories[0]->{      title,      "color": chipColor    }  }
export type BlogsQueryResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  estimatedReadingTime: number;
  slug: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  author: {
    name: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  category: {
    title: string | null;
    color: Color | null;
  } | null;
}>;

// Source: ../web/lib/sanity-queries/brand-queries.ts
// Variable: brandsQuery
// Query: *[_type == "brand"] | order(order asc, _createdAt desc) {    _id,    name,    "logoUrl": logo.asset->url,    "logoAlt": logo.alt,    link  }
export type BrandsQueryResult = Array<{
  _id: string;
  name: string | null;
  logoUrl: string | null;
  logoAlt: string | null;
  link: string | null;
}>;

// Source: ../web/lib/sanity-queries/homepage-hero-queries.ts
// Variable: homepageHeroQuery
// Query: *[_type == "homepageHero" && language == $language][0] {    _id,    language,    title,    subtitle,    description,    ctaButtons[] {      text,      link,      variant    },    expertiseSection {      title,      subtitle    },    trustedByText  }
export type HomepageHeroQueryResult = {
  _id: string;
  language: "ar" | "en" | null;
  title: string | null;
  subtitle: string | null;
  description: string | null;
  ctaButtons: Array<{
    text: string | null;
    link: string | null;
    variant: "outline" | "primary" | "secondary" | null;
  }> | null;
  expertiseSection: {
    title: string | null;
    subtitle: string | null;
  } | null;
  trustedByText: string | null;
} | null;

// Source: ../web/lib/sanity-queries/pricing-queries.ts
// Variable: pricingPageQuery
// Query: *[_type == "pricing" && language == $language][0] {    _id,    title,    language,        heroSection {      badge,      title,      description,      primaryButtonText,      secondaryButtonText    },        valuePropsSection {      valueProps[] {        icon,        title,        description      }    },        pricingPlansSection {      title,      description,      plans[] {        name,        price,        period,        description,        isPopular,        features[],        buttonText      }    },        comparisonSection {      title,      description,      comparisons[] {        feature,        us,        them      }    },        faqsSection {      title,      faqs[] {        question,        answer      }    },        ctaSection {      title,      description,      primaryButtonText,      secondaryButtonText,      disclaimer    },        seo {      metaTitle,      metaDescription    }  }
export type PricingPageQueryResult = {
  _id: string;
  title: string | null;
  language: string | null;
  heroSection: {
    badge: string | null;
    title: string | null;
    description: string | null;
    primaryButtonText: string | null;
    secondaryButtonText: string | null;
  } | null;
  valuePropsSection: {
    valueProps: Array<{
      icon: "check-circle" | "heart-handshake" | "rocket" | "shield" | "star" | "target" | "users" | "zap" | null;
      title: string | null;
      description: string | null;
    }> | null;
  } | null;
  pricingPlansSection: {
    title: string | null;
    description: string | null;
    plans: Array<{
      name: string | null;
      price: string | null;
      period: string | null;
      description: string | null;
      isPopular: boolean | null;
      features: Array<string> | null;
      buttonText: string | null;
    }> | null;
  } | null;
  comparisonSection: {
    title: string | null;
    description: string | null;
    comparisons: Array<{
      feature: string | null;
      us: string | null;
      them: string | null;
    }> | null;
  } | null;
  faqsSection: {
    title: string | null;
    faqs: Array<{
      question: string | null;
      answer: string | null;
    }> | null;
  } | null;
  ctaSection: {
    title: string | null;
    description: string | null;
    primaryButtonText: string | null;
    secondaryButtonText: string | null;
    disclaimer: string | null;
  } | null;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
  } | null;
} | null;

// Source: ../web/lib/sanity-queries/process-queries.ts
// Variable: processQuery
// Query: *[_type == "process" && language == $language][0] {    _id,    title,    language,    badge,    heading,    steps[] {      number,      title,      description,      tag    },    progressLabel  }
export type ProcessQueryResult = {
  _id: string;
  title: string | null;
  language: "ar" | "en" | null;
  badge: string | null;
  heading: string | null;
  steps: Array<{
    number: string | null;
    title: string | null;
    description: string | null;
    tag: string | null;
  }> | null;
  progressLabel: string | null;
} | null;

// Source: ../web/lib/sanity-queries/queries.ts
// Variable: homePageQuery
// Query: *[_type == "home"][0]{    _id,    _type,    overview,    showcaseProjects[]{      _key,      ...@->{        _id,        _type,        coverImage,        overview,        "slug": slug.current,        tags,        title,      }    },    title,  }
export type HomePageQueryResult = null;
// Variable: pagesBySlugQuery
// Query: *[_type == "page" && slug.current == $slug][0] {    _id,    _type,    body,    overview,    title,    "slug": slug.current,  }
export type PagesBySlugQueryResult = null;
// Variable: projectBySlugQuery
// Query: *[_type == "project" && slug.current == $slug && language == $language][0] {    _id,    "slug": slug.current,    name,    category,    description,    logo,    coverImages,    projectSections,    url,    priority,    "technologies": projectDimensions.technologies,    "iterations": projectDimensions.iterations,    "teamSize": projectDimensions.teamSize,    "timeline": string(projectDimensions.timeline.value) + " " + coalesce(projectDimensions.timeline.unit, ""),  }
export type ProjectBySlugQueryResult = {
  _id: string;
  slug: string | null;
  name: string | null;
  category: string | null;
  description: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  coverImages: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  projectSections: Array<{
    id?: string;
    name?: string;
    description?: BlockContent;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
    _key: string;
  }> | null;
  url: string | null;
  priority: number | null;
  technologies: number | null;
  iterations: number | null;
  teamSize: number | null;
  timeline: string | null;
} | null;
// Variable: allProjectsQuery
// Query: *[_type == "project" && language == $language] | order(priority asc, _createdAt desc) {    _id,    "slug": slug.current,    name,    category,    description,    logo,    coverImages,    projectSections,    url,    priority,    "technologies": projectDimensions.technologies,    "iterations": projectDimensions.iterations,    "teamSize": projectDimensions.teamSize,    "timeline": string(projectDimensions.timeline.value) + " " + coalesce(projectDimensions.timeline.unit, ""),  }
export type AllProjectsQueryResult = Array<{
  _id: string;
  slug: string | null;
  name: string | null;
  category: string | null;
  description: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  coverImages: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  projectSections: Array<{
    id?: string;
    name?: string;
    description?: BlockContent;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
    _key: string;
  }> | null;
  url: string | null;
  priority: number | null;
  technologies: number | null;
  iterations: number | null;
  teamSize: number | null;
  timeline: string | null;
}>;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    _id,    _type,    footer,    menuItems[]{      _key,      ...@->{        _type,        "slug": slug.current,        title      }    },    ogImage,  }
export type SettingsQueryResult = null;
// Variable: slugsByTypeQuery
// Query: *[_type == $type && defined(slug.current)]{"slug": slug.current}
export type SlugsByTypeQueryResult = Array<{
  slug: string | null;
}>;
// Variable: servicesQuery
// Query: *[_type == "service" && language == $language] {    name,    "id": id.current,    description,    categories,    language  }
export type ServicesQueryResult = Array<{
  name: string | null;
  id: string | null;
  description: string | null;
  categories: Array<string> | null;
  language: string | null;
}>;
// Variable: testimonialsQuery
// Query: *[_type == "testimonial" && language == $language] {    _id,    clientName,    role,    testimonial,    rating,    language,    clientImage {      asset->{        url,        metadata {          dimensions        }      }    }  }
export type TestimonialsQueryResult = Array<{
  _id: string;
  clientName: string | null;
  role: string | null;
  testimonial: string | null;
  rating: number | null;
  language: string | null;
  clientImage: {
    asset: {
      url: string | null;
      metadata: {
        dimensions: SanityImageDimensions | null;
      } | null;
    } | null;
  } | null;
}>;

// Source: ../web/lib/sanity-queries/service-queries.ts
// Variable: serviceQuery
// Query: *[_type == "service" && id.current == $slug && language == $language][0] {    _id,    name,    "slug": id.current,    shortDescription,    description,    categories,    icon,    heroSection {      tagline,      headline,      subheadline,      primaryButtonText,      secondaryButtonText    },    featuresSection {      title,      description    },    technologiesSection {      title,      description    },    processSection {      title,      description,      processSteps[] {        number,        title,        description      }    },    features[] {      title,      description,      icon    },    technologies[] {      name,      icon    },    benefits,    whyChooseUs {      headline,      description,      reasons[] {        title,        description,        icon      }    },    ctaSection {      headline,      description,      primaryButtonText,      secondaryButtonText    },    seo {      metaTitle,      metaDescription    }  }
export type ServiceQueryResult = {
  _id: string;
  name: string | null;
  slug: string | null;
  shortDescription: string | null;
  description: string | null;
  categories: Array<string> | null;
  icon: "chart" | "cloud" | "code" | "database" | "monitor" | "palette" | "rocket" | "settings" | "shield" | "smartphone" | null;
  heroSection: {
    tagline: string | null;
    headline: string | null;
    subheadline: string | null;
    primaryButtonText: string | null;
    secondaryButtonText: string | null;
  } | null;
  featuresSection: {
    title: string | null;
    description: string | null;
  } | null;
  technologiesSection: {
    title: string | null;
    description: string | null;
  } | null;
  processSection: {
    title: string | null;
    description: string | null;
    processSteps: Array<{
      number: string | null;
      title: string | null;
      description: string | null;
    }> | null;
  } | null;
  features: Array<{
    title: string | null;
    description: string | null;
    icon: "code" | "gauge" | "gitbranch" | "globe" | "palette" | "rocket" | "shield" | "smartphone" | "users" | "zap" | null;
  }> | null;
  technologies: Array<{
    name: string | null;
    icon: string | null;
  }> | null;
  benefits: Array<string> | null;
  whyChooseUs: {
    headline: string | null;
    description: string | null;
    reasons: Array<{
      title: string | null;
      description: string | null;
      icon: "code" | "rocket" | "shield" | "users" | "zap" | null;
    }> | null;
  } | null;
  ctaSection: {
    headline: string | null;
    description: string | null;
    primaryButtonText: string | null;
    secondaryButtonText: string | null;
  } | null;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
  } | null;
} | null;
// Variable: servicesSlugQuery
// Query: *[_type == "service"] {    "slug": id.current  } | order(slug)
export type ServicesSlugQueryResult = Array<{
  slug: string | null;
}>;
// Variable: projectsByServiceQuery
// Query: *[_type == "project" && language == $language && references(*[_type == "service" && id.current == $serviceSlug && language == $language]._id)] | order(priority asc, _createdAt desc) {    _id,    "slug": slug.current,    name,    category,    description,    logo,    coverImages,    projectSections,    url,    priority,    "technologies": projectDimensions.technologies,    "iterations": projectDimensions.iterations,    "teamSize": projectDimensions.teamSize,    "timeline": string(projectDimensions.timeline.value) + " " + coalesce(projectDimensions.timeline.unit, ""),  }
export type ProjectsByServiceQueryResult = Array<{
  _id: string;
  slug: string | null;
  name: string | null;
  category: string | null;
  description: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  coverImages: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  projectSections: Array<{
    id?: string;
    name?: string;
    description?: BlockContent;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
    _key: string;
  }> | null;
  url: string | null;
  priority: number | null;
  technologies: number | null;
  iterations: number | null;
  teamSize: number | null;
  timeline: string | null;
}>;
// Variable: homepageServicesQuery
// Query: *[_type == "service" && language == $language] | order(_createdAt asc) {    _id,    name,    "slug": id.current,    shortDescription,    icon  }
export type HomepageServicesQueryResult = Array<{
  _id: string;
  name: string | null;
  slug: string | null;
  shortDescription: string | null;
  icon: "chart" | "cloud" | "code" | "database" | "monitor" | "palette" | "rocket" | "settings" | "shield" | "smartphone" | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n *[_type == \"aboutHero\" && language == $language][0] {\n   _id,\n   language,\n   tagline,\n   title,\n   description\n }\n": AboutHeroQueryResult;
    "\n *[_type == \"aboutMissionVision\" && language == $language][0] {\n   _id,\n   language,\n   mission {\n     title,\n     description\n   },\n   vision {\n     title,\n     description\n   }\n }\n": AboutMissionVisionQueryResult;
    "\n *[_type == \"aboutStats\" && language == $language][0] {\n   _id,\n   language,\n   stats[] {\n     number,\n     label,\n     icon\n   }\n }\n": AboutStatsQueryResult;
    "\n *[_type == \"aboutStory\" && language == $language][0] {\n   _id,\n   language,\n   sectionTitle,\n   subtitle,\n   paragraphs,\n   image\n }\n": AboutStoryQueryResult;
    "\n *[_type == \"aboutValues\" && language == $language][0] {\n   _id,\n   language,\n   sectionTitle,\n   subtitle,\n   values[] {\n     title,\n     description,\n     icon\n   }\n }\n": AboutValuesQueryResult;
    "\n *[_type == \"aboutCTA\" && language == $language][0] {\n   _id,\n   language,\n   title,\n   description,\n   buttonText\n }\n": AboutCTAQueryResult;
    "\n *[_type == \"companyTimeline\" && language == $language][0] {\n   _id,\n   language,\n   title,\n   subTitle,\n   items[] {\n     year,\n     title,\n     description\n   }\n }\n": CompanyTimelineQueryResult;
    "\n *[_type == \"leadership\" && language == $language][0] {\n   _id,\n   language,\n   title,\n   subTitle,\n   members[] {\n    name,\n    designation,\n    portfolioUrl,\n    image\n  }\n }\n ": CompanyLeadershipQueryResult;
    "\n  *[_type == \"accelerate\" && language == $language][0] {\n    _id,\n    title,\n    language,\n    heading,\n    services,\n    buttonText\n  }\n": AccelerateQueryResult;
    "\n    *[_type == \"blog\" && slug.current == $slug && language == $language][0] {\n        title,\n        subTitle,\n        \"modifiedAt\": _updatedAt,\n        author->,\n        thumbnail,\n        body,\n        blogCategories[]->{\n            title,\n            \"chipColor\": chipColor.hex,\n            \"slug\": slug.current, \n        },\n    }\n": BlogBySlugQueryResult;
    "\n    *[_type == \"blog\" && language == $language] {\n        \"slug\": slug.current\n    }\n": BlogsSlugQueryResult;
    "\n  *[_type == \"blogCategory\"] {\n  title,\n  \"slug\": slug.current\n}\n": BlogCategoriesQueryResult;
    "\n   *[_type == \"blog\" && language == $language &&\n    ($categorySlugs == null || references(*[_type == \"blogCategory\" && slug.current in $categorySlugs]._id))\n  ] {\n    _id,\n    title,\n    subTitle,\n    // assumes 5 characters as mean word length\n    // https://ux.stackexchange.com/questions/22520/how-long-does-it-take-to-read-x-number-of-characters\n    \"readingTimeInMins\": round(length(pt::text(body)) / 5 / 180 ),\n    author->{\n     name,\n     image\n    },\n    blogCategories[]->{\n      title,\n      \"chipColor\": chipColor.hex\n    },\n    \"slug\": slug.current,\n    thumbnail,\n    publishedAt\n  }\n": BlogsByCategoryQueryResult;
    "\n  *[_type == \"blog\" && language == $language] | order(publishedAt desc) [0...10] {\n    _id,\n    title,\n    \"excerpt\": subTitle,\n    \"estimatedReadingTime\": round(length(pt::text(body)) / 5 / 180 ),\n    \"slug\": slug.current,\n    \"image\": thumbnail,\n    publishedAt,\n    author->{\n      name,\n      \"picture\": image\n    },\n    \"category\": blogCategories[0]->{\n      title,\n      \"color\": chipColor\n    }\n  }\n": BlogsQueryResult;
    "\n  *[_type == \"brand\"] | order(order asc, _createdAt desc) {\n    _id,\n    name,\n    \"logoUrl\": logo.asset->url,\n    \"logoAlt\": logo.alt,\n    link\n  }\n": BrandsQueryResult;
    "\n  *[_type == \"homepageHero\" && language == $language][0] {\n    _id,\n    language,\n    title,\n    subtitle,\n    description,\n    ctaButtons[] {\n      text,\n      link,\n      variant\n    },\n    expertiseSection {\n      title,\n      subtitle\n    },\n    trustedByText\n  }\n": HomepageHeroQueryResult;
    "\n  *[_type == \"pricing\" && language == $language][0] {\n    _id,\n    title,\n    language,\n    \n    heroSection {\n      badge,\n      title,\n      description,\n      primaryButtonText,\n      secondaryButtonText\n    },\n    \n    valuePropsSection {\n      valueProps[] {\n        icon,\n        title,\n        description\n      }\n    },\n    \n    pricingPlansSection {\n      title,\n      description,\n      plans[] {\n        name,\n        price,\n        period,\n        description,\n        isPopular,\n        features[],\n        buttonText\n      }\n    },\n    \n    comparisonSection {\n      title,\n      description,\n      comparisons[] {\n        feature,\n        us,\n        them\n      }\n    },\n    \n    faqsSection {\n      title,\n      faqs[] {\n        question,\n        answer\n      }\n    },\n    \n    ctaSection {\n      title,\n      description,\n      primaryButtonText,\n      secondaryButtonText,\n      disclaimer\n    },\n    \n    seo {\n      metaTitle,\n      metaDescription\n    }\n  }\n": PricingPageQueryResult;
    "\n  *[_type == \"process\" && language == $language][0] {\n    _id,\n    title,\n    language,\n    badge,\n    heading,\n    steps[] {\n      number,\n      title,\n      description,\n      tag\n    },\n    progressLabel\n  }\n": ProcessQueryResult;
    "\n  *[_type == \"home\"][0]{\n    _id,\n    _type,\n    overview,\n    showcaseProjects[]{\n      _key,\n      ...@->{\n        _id,\n        _type,\n        coverImage,\n        overview,\n        \"slug\": slug.current,\n        tags,\n        title,\n      }\n    },\n    title,\n  }\n": HomePageQueryResult;
    "\n  *[_type == \"page\" && slug.current == $slug][0] {\n    _id,\n    _type,\n    body,\n    overview,\n    title,\n    \"slug\": slug.current,\n  }\n": PagesBySlugQueryResult;
    "\n  *[_type == \"project\" && slug.current == $slug && language == $language][0] {\n    _id,\n    \"slug\": slug.current,\n    name,\n    category,\n    description,\n    logo,\n    coverImages,\n    projectSections,\n    url,\n    priority,\n    \"technologies\": projectDimensions.technologies,\n    \"iterations\": projectDimensions.iterations,\n    \"teamSize\": projectDimensions.teamSize,\n    \"timeline\": string(projectDimensions.timeline.value) + \" \" + coalesce(projectDimensions.timeline.unit, \"\"),\n  }\n": ProjectBySlugQueryResult;
    "\n  *[_type == \"project\" && language == $language] | order(priority asc, _createdAt desc) {\n    _id,\n    \"slug\": slug.current,\n    name,\n    category,\n    description,\n    logo,\n    coverImages,\n    projectSections,\n    url,\n    priority,\n    \"technologies\": projectDimensions.technologies,\n    \"iterations\": projectDimensions.iterations,\n    \"teamSize\": projectDimensions.teamSize,\n    \"timeline\": string(projectDimensions.timeline.value) + \" \" + coalesce(projectDimensions.timeline.unit, \"\"),\n  }\n": AllProjectsQueryResult;
    "\n  *[_type == \"settings\"][0]{\n    _id,\n    _type,\n    footer,\n    menuItems[]{\n      _key,\n      ...@->{\n        _type,\n        \"slug\": slug.current,\n        title\n      }\n    },\n    ogImage,\n  }\n": SettingsQueryResult;
    "\n  *[_type == $type && defined(slug.current)]{\"slug\": slug.current}\n": SlugsByTypeQueryResult;
    "\n  *[_type == \"service\" && language == $language] {\n    name,\n    \"id\": id.current,\n    description,\n    categories,\n    language\n  }\n": ServicesQueryResult;
    "\n  *[_type == \"testimonial\" && language == $language] {\n    _id,\n    clientName,\n    role,\n    testimonial,\n    rating,\n    language,\n    clientImage {\n      asset->{\n        url,\n        metadata {\n          dimensions\n        }\n      }\n    }\n  }\n": TestimonialsQueryResult;
    "\n  *[_type == \"service\" && id.current == $slug && language == $language][0] {\n    _id,\n    name,\n    \"slug\": id.current,\n    shortDescription,\n    description,\n    categories,\n    icon,\n    heroSection {\n      tagline,\n      headline,\n      subheadline,\n      primaryButtonText,\n      secondaryButtonText\n    },\n    featuresSection {\n      title,\n      description\n    },\n    technologiesSection {\n      title,\n      description\n    },\n    processSection {\n      title,\n      description,\n      processSteps[] {\n        number,\n        title,\n        description\n      }\n    },\n    features[] {\n      title,\n      description,\n      icon\n    },\n    technologies[] {\n      name,\n      icon\n    },\n    benefits,\n    whyChooseUs {\n      headline,\n      description,\n      reasons[] {\n        title,\n        description,\n        icon\n      }\n    },\n    ctaSection {\n      headline,\n      description,\n      primaryButtonText,\n      secondaryButtonText\n    },\n    seo {\n      metaTitle,\n      metaDescription\n    }\n  }\n": ServiceQueryResult;
    "\n  *[_type == \"service\"] {\n    \"slug\": id.current\n  } | order(slug)\n": ServicesSlugQueryResult;
    "\n  *[_type == \"project\" && language == $language && references(*[_type == \"service\" && id.current == $serviceSlug && language == $language]._id)] | order(priority asc, _createdAt desc) {\n    _id,\n    \"slug\": slug.current,\n    name,\n    category,\n    description,\n    logo,\n    coverImages,\n    projectSections,\n    url,\n    priority,\n    \"technologies\": projectDimensions.technologies,\n    \"iterations\": projectDimensions.iterations,\n    \"teamSize\": projectDimensions.teamSize,\n    \"timeline\": string(projectDimensions.timeline.value) + \" \" + coalesce(projectDimensions.timeline.unit, \"\"),\n  }\n": ProjectsByServiceQueryResult;
    "\n  *[_type == \"service\" && language == $language] | order(_createdAt asc) {\n    _id,\n    name,\n    \"slug\": id.current,\n    shortDescription,\n    icon\n  }\n": HomepageServicesQueryResult;
  }
}
